using exampleForm.json as an example configuration, make me a form, put the configuration into test.json. It has 5 pages. Each page contains 1 question. The first question is "What is your name?" which takes text input. The second question is "What is your quest?" which takes 3 options, "To find the holy grail", "To become a knight", "to do nothing". The third question is "What is your favourite colour?". The fourth question is "What did you think of the form?" which takes text as an input. The fifth question is "Any other comments?".

Add pagination logic to SearchPresenter.HandleResults. 
If there is only one page, do not show pagination. 
If there is two pages, on page one show the next button. On page two show the previous button. 
if there are up to 5 pages show previous, 1, 2, 3, 4, 5, next. 
if the current page is below 5, show previous, 1, 2, 3, 4, ellipsis, last page, next.
if the current page is last page - 4, show previous, 1, ellipsis, last page - 4, last page - 3, last page - 2, last page - 1, last page, next.
If there are more than 5 pages, show previous, 1, ellipsis, 2, 3, 4, ellipsis, last page, next.
The current page should use the govuk-pagination-item is-current="true" attribute. 
As the user changes pages, calculate the middle numbers so that the current page is in the middle 

refactor FakeSearchDataStore so it uses the Filters, Queries, SortKey, SortOrder, ItemsPerPage and PageNumber in SearchDetails to search in Data

add example configuration and logic for conditional branching between questions. 
A condition can be based on any rule against a question answer in the form.
Conditions are C# based logic that can be interpreted by the Roslyn compiler. 
The form data will be in a dictionary, the answer will have a key using the name property in the configuration.  

add example validation and logic for validation for questions.
A validation rule can be based on any question answer in the form.
Validation rules are C# based logic that can be interpreted by the Roslyn compiler.
The form data will be in a dictionary, the answer will have a key using the name property in the configuration.  

placeholders in the title start with { and end with }. Find any placeholders in the title and replace them with the data found in responseModel

using exampleSearchIndexType.json as an example, create a new configuration in fipSearchIndexType.json which allows you to search by the following text fields: 
first name, last name, company, postCode. 
related content will have links "Get help from the Insolvency Service" and "find out more about bankruptcy and insolvency"
the search index type id is "fip"
The title is "Search"
The description will say "You can search for an insolvency practitioner by name, company, town, city or postcode."

using exampleSearchResultsType.json as an example, create a new configuration in fipSearchResultsType.json which will show the following columns: 
first name, last name, company, postCode. 
The description will say "You have found {total} records. Click on the Name link to see the details"
the search index type id is "fip"

using exampleDetailType.json as an example, create a new configuration in fipDetailDype.json which will show two sections. 
The first section is titled "Insolvency practitioner details" and has the fields: first name, last name, company, address, postCode, telephone, fax, email, ip number. 
The second section is titled "Authorising body" and has the fields: IP name, website, address, telephone number, fax number
The title should say "Case details:" with the first name and last name

Hercules tests have a folder structure like: {test name}/input , {test name}/output , {test name}/proofs , {test name}/test_data
When creating a Hercules test, make this folder structure under Hercules\tests\{test name}
using textInputComponent.json and textInput.feature, create a json configuration and feature file for every component type found in test.json

create a c# playwright page object for the summary page in Compoment.Form.UI.Tests. It has the following HTML
<main class="govuk-main-wrapper" id="main-content" role="main">
            


    <h1 class="govuk-heading-l">Check your answers before sending your application</h1>


<dl class="govuk-summary-list"><div class="govuk-summary-list__row"><dt class="govuk-summary-list__key" id="what_is_your_name-key">
                    What is your name?
                </dt><dd class="govuk-summary-list__value" id="what_is_your_name-value">
Carl                </dd><dd class="govuk-summary-list__actions"><a class="govuk-link" id="what_is_your_name-change-link" href="#">Change <span class="govuk-visually-hidden">name</span></a></dd></div></dl>
<h2 class="govuk-heading-m">Now send your application</h2><p class="govuk-body">By submitting this application you are confirming that, to the best of your knowledge, the details you are providing are correct.</p>
<a class="govuk-button" data-module="govuk-button" draggable="false" href="/form/textComponent/confirmation" role="button" data-govuk-button-init="">Accept and send</a>



        </main>
There can be multiple govuk-summary-list items, ensure there is a method that can take a variable to find the key, value, and change link 

Using text.feature, using c#, create reqnroll step definitions and a playwright page object in Forms\Compoment.Form.UI.Tests for the following HTML
<form method="POST" enctype="multipart/form-data" action="/Form/Submit" novalidate="">
    
    <input type="hidden" name="pageId" value="what-is-your-name">
    <input type="hidden" name="formId" value="textComponent">
    

<div class="govuk-form-group "><h1 class="govuk-label-wrapper"><label for="what_is_your_name" class="govuk-label govuk-label--l">
            What is your name?
        </label></h1><input class="govuk-input " id="what_is_your_name" name="what_is_your_name" type="text"></div>    
    <button class="govuk-button btn btn-primary" data-module="govuk-button" type="submit" data-govuk-button-init="">Continue</button>
<input name="__RequestVerificationToken" type="hidden" value="CfDJ8HAbon_EdJVGqLiEVPXvnfAfit0ZPHLwlXYtLVxvu42sb5K1VKqv9gF2StXj8IXJRLzQf986xqBSEjxX1pPQJ7IKyRZTFyYUW4WmU2z0Ji9aMJcxARD34-boA7Ewipdzn3mtRQkviNEjl7mkuTXKap8"></form>

using text.feature as an example and ComponentStepDefinitions.cs, create feature files for all components in test.json . add new step definitions to ComponentStepDefinitions if necessary. 

refactor FakeFormStore so that it loads all available form json in the constructor and puts the loaded files in a dictionary. GetFormAsync will then return FormModel from the dictionary